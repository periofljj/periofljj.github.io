<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beauty of Dev.</title>
  <subtitle>心有猛虎，细嗅蔷薇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://periofljj.github.io/"/>
  <updated>2017-03-01T08:25:28.000Z</updated>
  <id>http://periofljj.github.io/</id>
  
  <author>
    <name>Peri Liang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>客户端存储小结</title>
    <link href="http://periofljj.github.io/2017/02/16/web-storage/"/>
    <id>http://periofljj.github.io/2017/02/16/web-storage/</id>
    <published>2017-02-16T09:53:56.000Z</published>
    <updated>2017-03-01T08:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人在工作和面试中常常遇到有关客户端存储的问题，于是系统性的总结如下，与各位共同进步。</p>
<h3 id="客户端存储的意义"><a href="#客户端存储的意义" class="headerlink" title="客户端存储的意义"></a>客户端存储的意义</h3><p>Web应用允许使用浏览器提供的API实现将数据存储到用户的电脑上。这种客户端存储相当于赋予了Web浏览器记忆功能。比方说，Web应用就可以用这种方式来“记住”用户的偏好甚至是用户所有的状态信息，以便准确地”回忆“起用户上一次访问的位置。</p>
<h3 id="客户端存储“同源策略”"><a href="#客户端存储“同源策略”" class="headerlink" title="客户端存储“同源策略”"></a>客户端存储“同源策略”</h3><p>不同站点的页面无法读取对方存储的数据，同一站点的不同页面可以互相共享存储数据，它为我们提供了一种通信机制。例如，一个页面上填写的表单数据可以显示在另外一个页面中。</p>
<h3 id="客户端存储的有效期"><a href="#客户端存储的有效期" class="headerlink" title="客户端存储的有效期"></a>客户端存储的有效期</h3><p>Web应用可以选择它们存储数据的有效期：</p>
<ul>
<li>临时存储：保存至当前窗口关闭或者浏览器退出。</li>
<li>永久存储：将数据永久地存储到硬盘上，数月甚至数年不时效。</li>
</ul>
<h3 id="客户端存储形式"><a href="#客户端存储形式" class="headerlink" title="客户端存储形式"></a>客户端存储形式</h3><h3 id="1-Web存储"><a href="#1-Web存储" class="headerlink" title="1. Web存储"></a>1. Web存储</h3><h4 id="1-1-什么是Web存储"><a href="#1-1-什么是Web存储" class="headerlink" title="1.1 什么是Web存储"></a>1.1 什么是Web存储</h4><p>Web存储标准所描述的API包含 <strong>localStorage</strong> 对象和 <strong>sessionStorage</strong> 对象，这两个对象实际上是持久化关联数组，是名值对的映射表，名和值都是字符串。</p>
<p>优点如下：</p>
<ul>
<li>易于使用</li>
<li>支持大容量存储（并非无限量）</li>
<li>兼容当前所有主流浏览器（但是不兼容早期浏览器）</li>
</ul>
<hr>
<h4 id="1-2-localStorage和sessionStorage的使用"><a href="#1-2-localStorage和sessionStorage的使用" class="headerlink" title="1.2 localStorage和sessionStorage的使用"></a>1.2 localStorage和sessionStorage的使用</h4><p><strong>localStorage</strong> 和 <strong>sessionStorage</strong> 同为Window对象的属性。这两个属性代表了同一个 <strong>Storage</strong> 对象，即一个持久化关联数组，它通过string索引和存储。Storage对象在使用上和一般的JavaScript对象没什么区别，即对象的属性为字符串，随后浏览器会将值储存起来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>:<span class="string">"storage"</span>&#125;; <span class="comment">//JS对象的创建</span></div></pre></td></tr></table></figure>
<p>目前浏览器仅支持字符串类型存储，若希望存储和获取其他数据类型，需要手动编码解码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//number</span></div><div class="line">localStorage.x = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> x = <span class="built_in">parseInt</span>(localStorage.x);</div><div class="line"></div><div class="line"><span class="comment">//data</span></div><div class="line">localStorage.lastRead = (<span class="keyword">new</span> <span class="built_in">Date</span>()).toUTCString();</div><div class="line"><span class="keyword">var</span> lastRead = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(localStorage.lastRead));</div><div class="line"></div><div class="line"><span class="comment">//JSON</span></div><div class="line">localStorage.data = <span class="built_in">JSON</span>.stringify(data);</div><div class="line"><span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(localStorage.data);</div></pre></td></tr></table></figure></p>
<hr>
<h4 id="1-3-localStorage和sessionStorage的对比"><a href="#1-3-localStorage和sessionStorage的对比" class="headerlink" title="1.3 localStorage和sessionStorage的对比"></a>1.3 localStorage和sessionStorage的对比</h4><p><strong>localStorage</strong> 和 <strong>sessionStorage</strong> 区别在于存储的有效期和作用域的不同，对比如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">localStorage</th>
<th style="text-align:left">sessionStorage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">有效期</td>
<td style="text-align:left">永久，除非Web应用或用户刻意删除</td>
<td style="text-align:left">与存储数据的脚本所在最顶层的窗口或者是浏览器标签页是一样的</td>
</tr>
<tr>
<td style="text-align:left">作用域</td>
<td style="text-align:left">限定在文档源（主机名、协议、端口）级别，同源的文档共享同样的localStorage数据，可以互相读取覆盖。</td>
<td style="text-align:left">限定在文档源+窗口中。同源的文档渲染在不同的浏览器标签页中，彼此无法共享sessionStorage数据。</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="1-4-存储API"><a href="#1-4-存储API" class="headerlink" title="1.4 存储API"></a>1.4 存储API</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">setItem()    <span class="comment">//向对象传值</span></div><div class="line">getItem()    <span class="comment">// 参数为属性名，获取对应的值</span></div><div class="line">removeItem() <span class="comment">//参数为属性名，删除对应数据</span></div><div class="line">clear()      <span class="comment">//删除所有存储的数据</span></div><div class="line">key()        <span class="comment">//传入0 ~ length-1的数字，获得此处存储数据名字</span></div></pre></td></tr></table></figure>
<hr>
<h4 id="1-5-存储事件"><a href="#1-5-存储事件" class="headerlink" title="1.5 存储事件"></a>1.5 存储事件</h4><p>一旦存储在localStorage或者sessionStorage的数据发生改变，浏览器都会在其他对该数据可见的窗口对象上触发存储事件（但是，在对数据进行改变的窗口对象上是不会触发的。）</p>
<p>与存储事件相关的事件对象有五个重要属性：</p>
<ul>
<li><strong>key</strong> //被设置或者移除的项的名字或者键名</li>
<li><strong>newValue</strong> //保存该项的新值</li>
<li><strong>oldValue</strong> //改变或者删除该项前，保存该项原先的值。若插入新项则为null</li>
<li><strong>storageArea</strong> //目标Window对象上的localStorage属性或者是sessionStorage属性。</li>
<li><strong>url</strong> //触发该存储变化脚本所在文档的url</li>
</ul>
<hr>
<h3 id="2-cookie"><a href="#2-cookie" class="headerlink" title="2. cookie"></a>2. cookie</h3><p>cookie是一种早期的客户端存储机制，起初是针对服务器端脚本设计使用的。客户端提供的JavaScript API繁琐难于使用。但是新旧浏览器都支持它，兼容性完胜。</p>
<p>特点如下：</p>
<ul>
<li>只适合存储少量文本数据</li>
<li>任何以cookie形式存储的数据，不论服务器是否需要，每一次HTTP请求都会把这些数据传输到服务器端。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人在工作和面试中常常遇到有关客户端存储的问题，于是系统性的总结如下，与各位共同进步。&lt;/p&gt;
&lt;h3 id=&quot;客户端存储的意义&quot;&gt;&lt;a href=&quot;#客户端存储的意义&quot; class=&quot;headerlink&quot; title=&quot;客户端存储的意义&quot;&gt;&lt;/a&gt;客户端存储的意义&lt;/h
    
    </summary>
    
      <category term="Technology" scheme="http://periofljj.github.io/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://periofljj.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>H5实现移动端可视化数据报告开发笔记</title>
    <link href="http://periofljj.github.io/2017/01/05/hello-world/"/>
    <id>http://periofljj.github.io/2017/01/05/hello-world/</id>
    <published>2017-01-05T03:47:01.000Z</published>
    <updated>2017-03-01T08:16:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近自己学习用H5实现移动端可视化数据报告，即通过H5和其他前端技术将数据通过图表组件（饼图、折线图等）的方式直观的呈现在用户眼前。整个过程，尤其是组件化开发思想让自己受益匪浅，以下是按照学习和开发的流程总结的要点以供参考。</p>
<p><a href="https://github.com/periofljj/h5-dataVisualizationReport" target="_blank" rel="external">点击下载源代码</a></p>
<h2 id="Web开发流程简析"><a href="#Web开发流程简析" class="headerlink" title="Web开发流程简析"></a>Web开发流程简析</h2><h3 id="开发前"><a href="#开发前" class="headerlink" title="开发前"></a>开发前</h3><p>要进行功能设计和视觉/交互设计。</p>
<h3 id="开发中"><a href="#开发中" class="headerlink" title="开发中"></a>开发中</h3><ul>
<li>必要的技术规划</li>
<li>前端开发</li>
<li>后端开发</li>
</ul>
<h3 id="开发后"><a href="#开发后" class="headerlink" title="开发后"></a>开发后</h3><p>测试、上线</p>
<h2 id="前端开发要点总结"><a href="#前端开发要点总结" class="headerlink" title="前端开发要点总结"></a>前端开发要点总结</h2><h3 id="Step1-标注"><a href="#Step1-标注" class="headerlink" title="Step1.标注"></a>Step1.标注</h3><p><a href="http://www.getmarkman.com" target="_blank" rel="external">MarkMan</a> - 个人非常推荐的一款前端工程师切图标注工具。</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul>
<li>首先要划分图片模块和文字区域模块。</li>
<li>手机端UI设计元素尺寸一般都为偶数。因为移动端双倍分辨率下所有宽、高都必须是偶数，如果设计图不符合要求需要手动调整。</li>
<li>一个模块的位置，即x轴和y轴，必须定义一个。</li>
<li>移动端边距主要标注比例而不是具体的值。</li>
<li>标注文本却与要考虑行高。</li>
</ul>
<h3 id="Step2-切图"><a href="#Step2-切图" class="headerlink" title="Step2.切图"></a>Step2.切图</h3><ul>
<li>合并图层：<code>command</code> + <code>E</code> / 按住 <code>command</code> 鼠标变成选区模式。</li>
<li>另存为web格式：<code>command</code>+<code>shift</code>+<code>alt</code>+<code>s</code>。如果元素有透明的背景，则需要存在png24格式。</li>
</ul>
<h3 id="Step3-项目类JS开发"><a href="#Step3-项目类JS开发" class="headerlink" title="Step3.项目类JS开发"></a>Step3.项目类JS开发</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近自己学习用H5实现移动端可视化数据报告，即通过H5和其他前端技术将数据通过图表组件（饼图、折线图等）的方式直观的呈现在用户眼前。整个过程，尤其是组件化开发思想让自己受益匪浅，以下是按照学习和开发的流程总结的要点以供参考。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://
    
    </summary>
    
    
      <category term="H5" scheme="http://periofljj.github.io/tags/H5/"/>
    
      <category term="组件开发" scheme="http://periofljj.github.io/tags/%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
